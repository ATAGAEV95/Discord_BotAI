import io

import discord
import requests
from discord import File
from PIL import Image, ImageDraw, ImageFont

from app.data.request import get_user_rank
from app.tools.utils import darken_color, get_rank_description


def create_help_embed():
    """–°–æ–∑–¥–∞–µ—Ç embed –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !help"""
    embed = discord.Embed(
        title="üìã –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞",
        color=discord.Color.blue(),
        description="–í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:",
    )

    embed.add_field(
        name="üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
        value=(
            "`!reset` - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞\n"
            "`!help` - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "`!rang` - —É–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
            "`!rang list` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–Ω–≥–∏\n"
            "`!birthday DD.MM.YYYY` - –¥–æ–±–∞–≤–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è"
        ),
        inline=False,
    )

    embed.add_field(
        name="üì∫ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è YouTube",
        value=(
            "`!add_youtube` - –¥–æ–±–∞–≤–∏—Ç—å YouTube –∫–∞–Ω–∞–ª –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è\n"
            "*(—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)*"
        ),
        inline=False,
    )

    embed.add_field(
        name="üå§Ô∏è –ü–æ–≥–æ–¥–∞",
        value="`–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥]` - —Ç–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞\n`–ø–æ–≥–æ–¥–∞ [–≥–æ—Ä–æ–¥] –∑–∞–≤—Ç—Ä–∞` - –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞",
        inline=False,
    )
    return embed


async def create_rang_embed(display_name: str, message_count: int, rang_description: str, avatar_url: str,
                            server_id: int, user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç embed –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !rang —Å —Ü–≤–µ—Ç–æ–º –∏ —Ñ–æ–Ω–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–Ω–≥–∞"""
    rank = get_rank_description(message_count)

    progress_bar = f"{message_count}/{rank['next_threshold']}"
    exp_title = "EXP"

    server_rank = await get_user_rank(user_id, server_id)

    image_buffer = create_image_with_text(
        display_name,
        rang_description,
        progress_bar,
        exp_title,
        server_rank,
        rank["rank_level"],  # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ
        text_color=rank["text_color"],
        bg_filename=rank["bg_filename"],
        avatar_url=avatar_url,
    )
    file = File(image_buffer, filename="rang_with_text.png")

    embed = discord.Embed()
    embed.set_image(url="attachment://rang_with_text.png")

    return embed, file


def create_rang_list_embed():
    """–°–æ–∑–¥–∞–µ—Ç embed –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !rang list"""
    embed = discord.Embed(
        title="üéñÔ∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–Ω–≥–æ–≤",
        color=discord.Color.blurple(),
        description="–í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–Ω–≥–∏ –∏ —É—Å–ª–æ–≤–∏—è –∏—Ö –ø–æ–ª—É—á–µ–Ω–∏—è:",
    )

    embed.add_field(name="–ß–µ–ª–æ–≤–µ–∫", value="0 —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)

    embed.add_field(name="–ù–∞—á–∏–Ω–∞—é—â–∏–π –±–∏—á", value="1-49 —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)

    embed.add_field(name="–†–∞–¥—É–∂–Ω—ã–π –±–∏—á", value="50-99 —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)

    embed.add_field(name="–ë–∏—á", value="100-199 —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)

    embed.add_field(name="–ë–æ—Å—Å –±–∏—á–µ–π", value="200-499 —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)

    embed.add_field(name="–ë–∏—á-–∏–º–ø–µ—Ä–∞—Ç–æ—Ä", value="500+ —Å–æ–æ–±—â–µ–Ω–∏–π", inline=False)

    embed.set_footer(text="–ü–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–≤—ã—Å–∏—Ç—å —Å–≤–æ–π —Ä–∞–Ω–≥!")
    return embed


def create_image_with_text(
        display_name,
        rang_description,
        progress_bar,
        exp_title,
        server_rank,
        rank_level,
        text_color=(44, 255, 109),
        bg_filename="rang0.jpg",
        avatar_url=None,
):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    background = Image.open(f"./app/resource/{bg_filename}").convert("RGBA")
    background = background.resize((1920, 480))

    width, height = background.size
    overlay = Image.new("RGBA", (width, height), (0, 0, 0, 0))
    draw = ImageDraw.Draw(overlay)
    rect_color = (30, 30, 30, 180)

    # --- —Ü–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π ---
    main_dark_color = darken_color(text_color, 0.75)  # –±–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–¥–ø–∏—Å–µ–π

    # –û—Ç—Å—Ç—É–ø—ã –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–ª–æ–∫–æ–≤
    margin_x = int(width * 0.035)
    margin_y = int(height * 0.12)
    radius = 28

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–æ–∫–æ–≤
    a_left = margin_x
    a_top = margin_y
    a_right = int(width * 0.70) - margin_x // 2
    a_bottom = height - margin_y
    b_left = a_right + margin_x
    b_top = margin_y
    b_right = width - margin_x
    b_bottom = margin_y + (height - 2 * margin_y) // 2 - 5
    c_left = b_left
    c_top = b_bottom + margin_y // 2
    c_right = b_right
    c_bottom = a_bottom

    # –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –≤—Å–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏
    draw.rounded_rectangle([a_left, a_top, a_right, a_bottom], radius, fill=rect_color)
    draw.rounded_rectangle([b_left, b_top, b_right, b_bottom], radius, fill=rect_color)
    draw.rounded_rectangle([c_left, c_top, c_right, c_bottom], radius, fill=rect_color)

    # --- –ê–í–ê–¢–ê–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
    avatar_size = int((a_bottom - a_top) * 0.7)
    avatar_margin = int(avatar_size * 0.08)
    avatar_left = a_left + avatar_margin + 20
    avatar_top = a_top + ((a_bottom - a_top) - avatar_size) // 2
    avatar_img = None

    if avatar_url:
        try:
            resp = requests.get(avatar_url)
            avatar_img = Image.open(io.BytesIO(resp.content)).convert("RGBA")
            avatar_img = avatar_img.resize((avatar_size, avatar_size))
            # –ö—Ä—É–≥–ª–∞—è –º–∞—Å–∫–∞
            mask = Image.new("L", (avatar_size, avatar_size), 0)
            mask_draw = ImageDraw.Draw(mask)
            mask_draw.ellipse((0, 0, avatar_size, avatar_size), fill=255)
            avatar_img.putalpha(mask)
            # –í—Å—Ç–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–≤–µ—Ä—Ö –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤
            overlay.paste(avatar_img, (avatar_left, avatar_top), avatar_img)
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:", e)
            avatar_img = None

    # --- –®—Ä–∏—Ñ—Ç—ã ---
    try:
        main_font = ImageFont.truetype("./app/resource/montserrat.ttf", 70)
        aux_font = ImageFont.truetype("./app/resource/montserrat.ttf", 40)
        aux_value_font = ImageFont.truetype("./app/resource/montserrat.ttf", 40)
        server_rank_font = ImageFont.truetype("./app/resource/montserrat.ttf", 50)  # –®—Ä–∏—Ñ—Ç –¥–ª—è server_rank
    except Exception:
        main_font = aux_font = aux_value_font = server_rank_font = ImageFont.load_default()

    def draw_centered_text_block(texts_fonts_colors, center_x, center_y, gapp=10):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É"""
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É –±–ª–æ–∫–∞
        heights = []
        for text, font, _ in texts_fonts_colors:
            bbox = draw.textbbox((0, 0), text, font=font)
            heights.append(bbox[3] - bbox[1])

        total_heights = sum(heights) + gapp * (len(heights) - 1)
        current_y = center_y - total_heights // 2

        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–µ–∫—Å—Ç
        for (text, font, color), text_height in zip(texts_fonts_colors, heights):
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            draw.text((center_x - text_width // 2, current_y), text, font=font, fill=color)
            current_y += text_height + gapp

    # ------ –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï A ------
    # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä ‚Äî –ø–æ—Å–ª–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –∏–Ω–∞—á–µ –æ–±—ã—á–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    a_text_left = avatar_left + avatar_size + avatar_margin + 20 if avatar_img else a_left + 10
    a_cy = a_top + (a_bottom - a_top) // 2

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    server_rank_text = f"Server rank #{server_rank}"

    # –†–∞–∑–º–µ—Ä—ã –≤—Å–µ—Ö —Ç—Ä–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤
    dn_bbox = draw.textbbox((0, 0), display_name, font=main_font)
    dn_height = dn_bbox[3] - dn_bbox[1]

    rd_bbox = draw.textbbox((0, 0), rang_description, font=main_font)
    rd_height = rd_bbox[3] - rd_bbox[1]

    sr_bbox = draw.textbbox((0, 0), server_rank_text, font=server_rank_font)
    sr_height = sr_bbox[3] - sr_bbox[1]

    # –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
    gap = 25  # –û—Ç—Å—Ç—É–ø –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    total_height = dn_height + rd_height + sr_height + 2 * gap
    top_block = a_cy - total_height // 2

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç—Ä–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
    draw.text((a_text_left, top_block), display_name, font=main_font, fill=main_dark_color)
    draw.text((a_text_left, top_block + dn_height + gap), rang_description, font=main_font, fill=text_color)
    draw.text((a_text_left, top_block + dn_height + gap + rd_height + gap), server_rank_text, font=server_rank_font,
              fill=main_dark_color)

    # ------ –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï B ------
    b_cx = b_left + (b_right - b_left) // 2
    b_cy = b_top + (b_bottom - b_top) // 2

    draw_centered_text_block(
        [("LEVEL", aux_font, main_dark_color), (str(rank_level), aux_value_font, text_color)],
        b_cx,
        b_cy,
        gapp=20,
    )

    # ------ –í–´–†–ê–í–ù–ò–í–ê–ù–ò–ï C ------
    c_cx = c_left + (c_right - c_left) // 2
    c_cy = c_top + (c_bottom - c_top) // 2

    draw_centered_text_block(
        [(exp_title, aux_font, main_dark_color), (progress_bar, aux_value_font, text_color)],
        c_cx,
        c_cy,
        gapp=20,
    )

    # –°–æ–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    background = Image.alpha_composite(background, overlay)
    img_buffer = io.BytesIO()
    background.save(img_buffer, format="PNG")
    img_buffer.seek(0)
    return img_buffer
