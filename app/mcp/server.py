import os
from typing import Any
import httpx
from mcp.server.fastmcp import FastMCP
from dotenv import load_dotenv
import logging


logging.getLogger("fastmcp").setLevel(logging.WARNING)
logging.getLogger("httpx").setLevel(logging.WARNING)
load_dotenv()


mcp = FastMCP("weather")
OPENWEATHER_API_KEY = os.getenv("OPENWEATHERMAP_API_KEY")
OPENWEATHER_BASE_URL = "https://api.openweathermap.org/data/2.5"


async def make_weather_request(endpoint: str, params: dict[str, Any]) -> dict[str, Any] | None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenWeatherMap API

    Args:
        endpoint: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, "weather" –∏–ª–∏ "forecast")
        params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞

    Returns:
        JSON –æ—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not OPENWEATHER_API_KEY:
        return None

    params["appid"] = OPENWEATHER_API_KEY
    params["lang"] = "ru"

    url = f"{OPENWEATHER_BASE_URL}/{endpoint}"

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=30.0)
            response.raise_for_status()
            return response.json()
    except httpx.HTTPStatusError:
        return None
    except Exception:
        return None


@mcp.tool()
async def get_current_weather(city: str, units: str = "metric") -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ú–æ—Å–∫–≤–∞" –∏–ª–∏ "Moscow")
        units: –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - "metric" (–¶–µ–ª—å—Å–∏–π) –∏–ª–∏ "imperial" (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã
    """
    params = {
        "q": city,
        "units": units
    }

    data = await make_weather_request("weather", params)

    if not data:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."

    if "cod" in data and data["cod"] != 200:
        return f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    try:
        main = data["main"]
        weather = data["weather"][0]
        wind = data["wind"]

        temp_unit = "¬∞C" if units == "metric" else "¬∞F"
        wind_unit = "–º/—Å" if units == "metric" else "–º–∏–ª—å/—á"

        result = f"""
üåç –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data['name']}, {data['sys']['country']}

üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {main['temp']:.1f}{temp_unit}
ü§î –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {main['feels_like']:.1f}{temp_unit}
üìä –ú–∏–Ω/–ú–∞–∫—Å: {main['temp_min']:.1f}{temp_unit} / {main['temp_max']:.1f}{temp_unit}

‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {weather['description'].capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {main['humidity']}%
üéöÔ∏è –î–∞–≤–ª–µ–Ω–∏–µ: {main['pressure']} –≥–ü–∞
üí® –í–µ—Ç–µ—Ä: {wind['speed']} {wind_unit}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ {wind.get('deg', '–Ω/–¥')}¬∞
        """.strip()

        return result

    except KeyError as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"


@mcp.tool()
async def get_forecast(city: str, days: int = 3, units: str = "metric") -> str:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π

    Args:
        city: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
        days: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ (1-5)
        units: –°–∏—Å—Ç–µ–º–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è - "metric" (–¶–µ–ª—å—Å–∏–π) –∏–ª–∏ "imperial" (–§–∞—Ä–µ–Ω–≥–µ–π—Ç)

    Returns:
        –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º –ø–æ–≥–æ–¥—ã
    """
    days = min(max(days, 1), 5)

    params = {
        "q": city,
        "units": units,
        "cnt": days * 8
    }

    data = await make_weather_request("forecast", params)

    if not data:
        return f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city}'."

    if "cod" not in data or data["cod"] != "200":
        return f"‚ùå –û—à–∏–±–∫–∞ API: {data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"

    try:
        temp_unit = "¬∞C" if units == "metric" else "¬∞F"

        forecasts = []
        current_date = None
        day_data = []

        for item in data["list"]:
            date = item["dt_txt"].split()[0]

            if current_date != date:
                if day_data:
                    forecasts.append(format_day_forecast(day_data, temp_unit))
                    if len(forecasts) >= days:
                        break

                current_date = date
                day_data = [item]
            else:
                day_data.append(item)

        if day_data and len(forecasts) < days:
            forecasts.append(format_day_forecast(day_data, temp_unit))

        result = f"üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –¥–ª—è {data['city']['name']}, {data['city']['country']}\n\n"
        result += "\n\n".join(forecasts)

        return result

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞: {str(e)}"


def format_day_forecast(day_data: list, temp_unit: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å

    Args:
        day_data: –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –∑–∞ –¥–µ–Ω—å (–∫–∞–∂–¥—ã–µ 3 —á–∞—Å–∞)
        temp_unit: –°–∏–º–≤–æ–ª –µ–¥–∏–Ω–∏—Ü—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
    """
    date = day_data[0]["dt_txt"].split()[0]

    temps = [item["main"]["temp"] for item in day_data]
    avg_temp = sum(temps) / len(temps)
    min_temp = min(temps)
    max_temp = max(temps)

    descriptions = [item["weather"][0]["description"] for item in day_data]
    most_common_desc = max(set(descriptions), key=descriptions.count)

    avg_humidity = sum(item["main"]["humidity"] for item in day_data) / len(day_data)
    avg_wind = sum(item["wind"]["speed"] for item in day_data) / len(day_data)

    return f"""
üìÜ {date}
üå°Ô∏è –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f}{temp_unit}
üìä –ú–∏–Ω/–ú–∞–∫—Å: {min_temp:.1f}{temp_unit} / {max_temp:.1f}{temp_unit}
‚òÅÔ∏è –£—Å–ª–æ–≤–∏—è: {most_common_desc.capitalize()}
üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {avg_humidity:.0f}%
üí® –í–µ—Ç–µ—Ä: {avg_wind:.1f} –º/—Å
    """.strip()


if __name__ == "__main__":
    mcp.run(transport="stdio")