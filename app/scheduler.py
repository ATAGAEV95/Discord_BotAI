import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from sqlalchemy import select
from app.models import Birthday, async_session  # –∏–∑–º–µ–Ω–µ–Ω–æ User –Ω–∞ Birthday
import discord


async def get_today_birthday_users(timezone='Europe/Moscow'):
    today = datetime.now(pytz.timezone(timezone)).date()
    async with async_session() as session:
        stmt = select(Birthday).where(Birthday.birthday != None)
        result = await session.execute(stmt)
        users = result.scalars().all()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ –¥–Ω—é –∏ –º–µ—Å—è—Ü—É, –≥–æ–¥ ‚Äî –Ω–µ –±–µ—Ä–µ–º –≤ —Ä–∞—Å—á–µ—Ç!
        birthday_users = [u for u in users if u.birthday and u.birthday.month == today.month and u.birthday.day == today.day]
        return birthday_users


async def send_birthday_congratulations(bot: discord.Client):
    guilds = bot.guilds
    users = await get_today_birthday_users()
    for guild in guilds:
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª
        channel = discord.utils.get(guild.text_channels, position=0)
        if not channel:
            continue
        for user in users:
            member = guild.get_member(user.user_id)
            if member:
                await channel.send(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º {member.mention} —Å –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è! üéâ")


def start_scheduler(bot: discord.Client):
    scheduler = AsyncIOScheduler(timezone=pytz.timezone('Europe/Moscow'))
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
    scheduler.add_job(send_birthday_congratulations, 'cron', hour=9, minute=0, args=[bot])
    scheduler.start()
